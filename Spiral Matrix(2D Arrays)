Leetcode
#include<iostream>
#include<vector>
using namespace std;
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int> >& matrix) {
        
        
        vector<int> ans;
        int row = matrix.size();
        int col = matrix[0].size();
        
        
   
    int count = 0;
    int total = row*col;

    int startingrow =0;
    int startingcol = 0;
    int endingrow= row-1;
    int endingcol=col-1;

    while(count<total){
        //print first row
        for(int index = startingcol;count<total && index<endingcol;index++){
            ans.push_back(matrix[startingrow][index]);
            count++;
        }
        startingrow++;

        //print last col
        for(int index = startingrow;count<total && index<endingrow;index++){
            ans.push_back(matrix[index][endingcol]);
            count++;
        }
        endingcol--;
        //print last row
        for(int index = endingcol;count<total && index>=startingcol;index--){
            ans.push_back(matrix[endingrow][index]);
            count++;
        }
        endingrow--;
        //printfirst col
        for(int index = endingrow;count<total && index>=startingrow;index--){
            ans.push_back(matrix[index][startingcol]);
            count++;
        }
        startingcol++;

    }
    return ans;
    }
};









Coding Ninjas
#include <bits/stdc++.h> 

vector<int> spiralPathMatrix(vector<vector<int>> matrix, int n, int m) 

{

    vector <int> ans;

    int total = m*n;

    int count = 0;

 

    int left = 0;

    int right = m-1;

    int top = 0;

    int bottom = n-1;

 

    while(count < total){

        for(int i=left; i<=right && count < total; i++){

            ans.push_back(matrix[top][i]);

            count++;

        }

        top++;

 

        for(int i=top; i<=bottom && count < total; i++){

            ans.push_back(matrix[i][right]);

            count++;

        }

        right--;

 

        for(int i=right; i>=left && count < total; i--){

            ans.push_back(matrix[bottom][i]);

            count++;

        }

        bottom--;

 

        for(int i=bottom; i>=top && count < total; i--){

            ans.push_back(matrix[i][left]);

            count++;

        }

        left++;

    }

    return ans;

}
